# -------------------------------------------------
# LAB 1
# -------------------------------------------------

L = ['red', 'red', 'green', 'blue', 'orange']



print(L)

# OUTPUT > ['neerg', 'nedlog', 'eulb', 'egnaro', 'der']

# -------------------------------------------------
# LAB 2 - Determine if a number is prime or not
# -------------------------------------------------



# -------------------------------------------------
# LAB 3 - Word Jumble Game
# -------------------------------------------------

# Create a word list
# Pick a word
# Jumble the word
# Present it to the user
# Ask for the user's guess
# Compare and give result
# Repeat the process for rest of the words
# Give the final score


# -------------------------------------------------
# LAB 4 - Create a fibonacci module and test it
# -------------------------------------------------

# fibo.py

def genfibo(n):
  return fibolist

def checkfibo(n):
  # postuple = (left, right)
  return postuple
  
# projecty.py

# Project Y


# Generate 100 random numbers
# 1. Filter out the fibonacci numbers
# 2. Filter out those numbers which are divisible by any of the last 7 of the
#    first 12 fibonacci numbers



----------------------------------------------------- solutions

# fibo.py

# fibo.py


# 0 1 1 2 3 5 8 13...

def genfibo(n):
    fibolist = []
    x = 0
    fibolist.append(x)
    y = 1
    fibolist.append(y)
    for i in range(n-2):
        z = x + y
        fibolist.append(z)
        x = y
        y = z
    return fibolist

def checkfibo(n):
    x = 0
    y = 1
    while True:
        z = x + y
        if(n == z):
            return (0, 0)
        elif(z > n):
            return (abs(n-y), abs(n-z))
        x = y
        y = z

# -----------------------------------


if __name__ == '__main__':

    print(genfibo(12))
    print(checkfibo(44))
    
    
prijecty.py


import random
from fibo import checkfibo, genfibo

# input

R = []
for i in range(100):
    R.append(random.randint(1, 100))

# Process

L1 = []
for n in R:
    if(checkfibo(n) == (0, 0)):
        L1.append(n)



L2 = []
F = genfibo(12)
for n in R:
    for fn in F[-7:]:
        if(n % fn == 0):
            L2.append(n)
            break

# output

print('Objective 1: ', L1)
print('Objective 2: ', L2)

# -------------------------------------------------
# LAB 5 - Student Record
# -------------------------------------------------

student.csv
--------------------------------------------------
name,age,regid,phy,chem,math,bio,avg,rank
Vijay,14,HPE001,99,98,97,96,0,0
Aryan,14,HPE002,98,91,93,96,0,0
Muni,14,HPE003,97,98,97,94,0,0
Abhi,14,HPE004,96,93,97,95,0,0
Hemanth,14,HPE005,94,91,93,96,0,0
Grace,14,HPE006,94,95,96,97,0,0
Ankita,14,CAP007,99,99,99,99,0,0
John,14,HPE008,96,93,97,95,0,0
Chris,14,HPE009,94,91,93,96,0,0
Grace,14,ORA006,94,95,96,97,0,0
Ankita,14,INF007,99,99,99,99,0,0
--------------------------------------------------

-------------------------------------------------

# Report Generation
dottedline = '-'*70
    template = '{0:8} | {1:10} | {2:3} | {3:3} | {4:3} | {5:3} | {6:3} | {7:6} | {8:3}'
    print('CLASS REPORT')
    print(dottedline)
    print(template.format('REGID', 'NAME', 'AGE', 'P', 'C', 'M', 'B', 'AVG', 'R'))
    print(dottedline)
    for regid in dd.keys():
        name = dd[regid]['name']
        age  = dd[regid]['age']
        regid = dd[regid]['regid']
        phy = dd[regid]['phy']
        chem = dd[regid]['chem']
        math = dd[regid]['math']
        bio = dd[regid]['bio']
        avg = dd[regid]['avg']
        rank = dd[regid]['rank']
        print(template.format( regid, name, age,phy, chem, math, bio, avg, rank))
    print(dottedline)

# -------------- 1
f = open("students.csv", "r")
content = f.readlines()
f.close()

print(content)
print('-'*60 + ' > First Step')

# -------------- 2

classdict = {}

coldata = content[0]

columns = [item.strip() for item in coldata.split(',')]

for rowdata in content[1:]:
    rows = [item.strip() for item in rowdata.split(',')]
    studdict = dict(zip(columns, rows))
    classdict.setdefault(studdict['regid'], studdict)

print(classdict)
print('-'*60 + ' > Second Step')

# -------------- 3

for regid in classdict.keys():
    sum_of_subj_marks = 0
    for key in ['phy','chem', 'math', 'bio']:
        sum_of_subj_marks += float(classdict[regid][key])
    classdict[regid]['avg'] = sum_of_subj_marks / 4


print(classdict)
print('-'*60 + ' > Third Step')

# -------------- 4

avgs = [classdict[regid]['avg'] for regid in classdict.keys()]
avgs = list(set(avgs))
avgs.sort(reverse=True)
print(avgs)

rank = 1
for avg in avgs:
    for regid in classdict.keys():
        if(classdict[regid]['avg'] == avg):
            classdict[regid]['rank'] = rank
    rank += 1

print(classdict)
print('-'*60 + ' > Fourth Step')

# -------------- 5

path = r"students_updated.csv"
f = open(path, "w")
f.write(coldata)

for regid in classdict.keys():
    r = list(zip(*classdict[regid].items()))
    rowdata = ','.join([str(item) for item in r[1]]) + '\n'
    f.write(rowdata)

f.close()

print(classdict)
print('-'*60 + ' > Fifth Step')

# -------------- 6

genReport(classdict)
